{"version":3,"sources":["utilities/constants.js","assets/header.svg","components/QuizPanel/Questionpanel.jsx","assets/result.svg","components/QuizPanel/ResultPanel.jsx","utilities/swap.js","components/QuizPanel/QuizPanel.jsx","utilities/doesArrayHaveDuplicates.js","components/App.js","reportWebVitals.js","index.js"],"names":["BASE_URL","QUESTION_TYPES","QuestionPanel","loading","correctAnswer","answers","chooseAnswer","handleNextButton","isAnswered","questionType","className","src","headerImg","alt","capital","flag","map","answer","index","onClick","id","name","ResulPanel","handleResetButton","goodAnswers","resultImg","swap","theArray","indexA","indexB","temp","QuizPanel","useState","setQuestionType","gameStart","setGameStart","setLoading","setAnswers","setCorrectAnswer","setIsAnswered","setGoodAnswers","handleErrors","testingArray","filter","length","getRandomQuestionType","array","Set","size","Math","floor","random","fetch","then","response","json","data","newAnswers","item","newCorrectAnswer","numericCode","i","push","concat","catch","err","console","log","renderQuestion","useEffect","document","getElementById","style","backgroundColor","prevState","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.6b8632e2.chunk.js","sourcesContent":["export const BASE_URL = 'https://restcountries.eu/rest/v2/all';\r\n\r\nexport const QUESTION_TYPES = {\r\n  CAPITAL: 'CAPITAL',\r\n  FLAG: 'FLAG',\r\n  REGIO: 'REGIO',\r\n};\r\n","export default __webpack_public_path__ + \"static/media/header.182b6171.svg\";","import {QUESTION_TYPES} from '../../utilities/constants';\r\n\r\nimport headerImg from '../../assets/header.svg';\r\n\r\nconst QuestionPanel = ({loading, correctAnswer, answers, chooseAnswer, handleNextButton, isAnswered, questionType}) => {\r\n    return(\r\n        <div className=\"quiz-panel-container\">\r\n                <img src={headerImg} alt=\"\" className=\"quiz-img\"/>\r\n                <div className=\"quiz-question\">\r\n                {loading ? null :  (\r\n                        questionType === QUESTION_TYPES.CAPITAL ? (\r\n                            `${correctAnswer.capital} is a capital of`\r\n                        ) : (\r\n                            <div className='flag-cointainer'> \r\n                                <img className='flag' src={correctAnswer.flag} alt='something went wrong!'/>\r\n                                Which country does this flag belong to? \r\n                            </div> \r\n                            ) \r\n                    //    <h1>{questionType}</h1>\r\n                        )\r\n                    }</div>\r\n                <ul className=\"quiz-answers\">\r\n                    {loading ?\r\n                     <div>Next question is loading...</div>\r\n                     : (\r\n                    // We can't use ID as key because numericCode is not unique. Its good when it comes about comparing values but using it as a key create some bugs\r\n                    answers.map((answer, index) => <li className='quiz-answer'\r\n                    onClick={()=>chooseAnswer(answer.id)}\r\n                    id={'id' + answer.id}\r\n                    key={index}>{answer.name}</li>)\r\n                    )}\r\n                      { isAnswered && \r\n                        (\r\n                            <button \r\n                            className='quiz-button quiz-button-next' onClick={handleNextButton}>next</button>\r\n                         )\r\n                    }\r\n                </ul>\r\n\r\n        </div>\r\n    )\r\n}\r\n \r\nexport default QuestionPanel;","export default __webpack_public_path__ + \"static/media/result.d76bfdf8.svg\";","import resultImg from '../../assets/result.svg';\r\n\r\nimport '../../styles/ResultPanel.css';\r\n\r\nconst ResulPanel = ( {handleResetButton, goodAnswers}) => {\r\n\r\n    return (\r\n        <div className='result-panel'>\r\n            <img src={resultImg} alt=\"Nice\"/>\r\n            <div className='display-results'>\r\n                <h1 className='result-title'>Results</h1>\r\n                <p>You got <span>{goodAnswers}</span> correct answers</p>\r\n            </div>\r\n            <button className='quiz-button quiz-button-try' onClick={handleResetButton}>try again</button>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default ResulPanel;","//this function change elements order\r\nexport const swap = function (theArray, indexA, indexB) {\r\n  const temp = theArray[indexA];\r\n  theArray[indexA] = theArray[indexB];\r\n  theArray[indexB] = temp;\r\n};\r\n","import { useState, useEffect } from 'react';\r\n\r\nimport QuestionPanel from './Questionpanel';\r\nimport ResultPanel from './ResultPanel';\r\n\r\nimport { BASE_URL, QUESTION_TYPES } from '../../utilities/constants';\r\nimport { swap } from '../../utilities/swap';\r\nimport { doesArrayHaveDuplicates } from '../../utilities/doesArrayHaveDuplicates';\r\n\r\nimport '../../styles/QuizPanel.css';\r\n\r\nconst QuizPanel = () => {\r\n\r\n  const [questionType,setQuestionType] = useState(QUESTION_TYPES.FLAG);\r\n\r\n  const [gameStart, setGameStart] = useState(true);\r\n\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  //All answers\r\n  const [answers, setAnswers] = useState([]);\r\n\r\n  const [correctAnswer, setCorrectAnswer] = useState('');\r\n\r\n  //Check if user answered\r\n  const [isAnswered, setIsAnswered] = useState(false);\r\n\r\n  const [goodAnswers, setGoodAnswers] = useState(0);\r\n\r\n  const getRandomFlagQuestion = () => {\r\n    fetch(`${BASE_URL}?fields=name;flag;numericCode`)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        let newAnswers = [];\r\n        const item = data[Math.floor(Math.random() * data.length)];\r\n        const newCorrectAnswer = {\r\n          id: item.numericCode,\r\n          flag: item.flag,\r\n          name: item.name,\r\n        };\r\n        setCorrectAnswer({\r\n          id: newCorrectAnswer.id,\r\n          name: newCorrectAnswer.name,\r\n          flag: newCorrectAnswer.flag,\r\n        });\r\n\r\n        //Generate 3 random answers\r\n        for (let i = 0; i < 3; i++) {\r\n          const random = Math.floor(Math.random() * data.length);\r\n          newAnswers.push({\r\n            id: data[random].numericCode,\r\n            name: data[random].name,\r\n          });\r\n        }\r\n        //concat random answers with correct answer\r\n        newAnswers = newAnswers.concat(newCorrectAnswer);\r\n\r\n        //this function change elements order\r\n        swap(newAnswers, 3, Math.floor(Math.random() * 3));\r\n\r\n        setAnswers(newAnswers);\r\n      })\r\n      .then(() => setLoading(false))\r\n      .catch(err => console.log(err));\r\n  };\r\n\r\n  const getRandomCapitalQuestion = () => {\r\n    fetch(`${BASE_URL}?fields=name;capital;numericCode`)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        let newAnswers = [];\r\n        const item = data[Math.floor(Math.random() * data.length)];\r\n        const newCorrectAnswer = {\r\n          id: item.numericCode,\r\n          capital: item.capital,\r\n          name: item.name,\r\n        };\r\n        setCorrectAnswer({\r\n          id: newCorrectAnswer.id,\r\n          name: newCorrectAnswer.name,\r\n          capital: newCorrectAnswer.capital,\r\n        });\r\n\r\n        //Generate 3 random answers\r\n        for (let i = 0; i < 3; i++) {\r\n          const random = Math.floor(Math.random() * data.length);\r\n          newAnswers.push({\r\n            id: data[random].numericCode,\r\n            name: data[random].name,\r\n          });\r\n        }\r\n        //concat random answers with correct answer\r\n        newAnswers = newAnswers.concat(newCorrectAnswer);\r\n\r\n        //this function change elements order\r\n        swap(newAnswers, 3, Math.floor(Math.random() * 3));\r\n\r\n        setAnswers(newAnswers);\r\n      })\r\n      .then(() => setLoading(false))\r\n      .catch(err => console.log(err));\r\n  };\r\n  const handleErrors = () => {\r\n    if (loading === false) {\r\n      const testingArray = answers.filter(answer => answer.length > 0);\r\n\r\n      //some elements in api don't have all properties so we must check\r\n\r\n      // if array have 4 elements\r\n      if (testingArray.length !== 4) {\r\n        getRandomQuestionType()\r\n      }\r\n      //check if we got capital name;\r\n      if (correctAnswer.name === '' || correctAnswer.name) {\r\n        getRandomQuestionType()\r\n      }\r\n      //if array doesnt have duplicates\r\n      if (doesArrayHaveDuplicates(testingArray)) {\r\n        getRandomQuestionType()\r\n      }\r\n    }\r\n  };\r\n  const chooseAnswer = id => {\r\n    if (!isAnswered) {\r\n      document.getElementById(`id${correctAnswer.id}`).style.backgroundColor = '#60BF88';\r\n      if (id === correctAnswer.id) {\r\n        // setUserPositiveResult(true);\r\n        setGoodAnswers(prevState => prevState + 1);\r\n      } else {\r\n        // setUserPositiveResult(false);\r\n        setGameStart(false);\r\n        document.getElementById(`id${id}`).style.backgroundColor = '#EA8282';\r\n      }\r\n    }\r\n    setIsAnswered(true);\r\n  };\r\n\r\n  const getRandomQuestionType = () => {\r\n      const random = Math.floor(Math.random() * 2);\r\n      if(random === 0){\r\n        setQuestionType(QUESTION_TYPES.CAPITAL);\r\n        getRandomCapitalQuestion()\r\n      }\r\n      else{\r\n        setQuestionType(QUESTION_TYPES.FLAG);\r\n        getRandomFlagQuestion()\r\n      }\r\n  }\r\n\r\n  const renderQuestion = () => {\r\n    setLoading(true);\r\n    getRandomQuestionType();\r\n    handleErrors();\r\n    setIsAnswered(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    renderQuestion();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const handleResetButton = () =>{\r\n    renderQuestion();\r\n    setGameStart(true);\r\n    setGoodAnswers(0);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h1 className='quiz-title'>Country Quiz</h1>\r\n      {isAnswered || gameStart ? (\r\n        <QuestionPanel\r\n        loading={loading}\r\n        correctAnswer={correctAnswer}\r\n        answers={answers}\r\n        chooseAnswer={chooseAnswer}\r\n        handleNextButton={renderQuestion}\r\n        isAnswered={isAnswered}\r\n        questionType={questionType}\r\n        />\r\n      ) : (\r\n          <ResultPanel \r\n          handleResetButton={handleResetButton}\r\n          goodAnswers={goodAnswers}\r\n          />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default QuizPanel;\r\n","export const doesArrayHaveDuplicates = array => {\r\n  return array.length !== new Set(array).size;\r\n};\r\n","import QuizPanel from './QuizPanel/QuizPanel';\r\n\r\nimport '../styles/reset.css';\r\nimport '../styles/App.css';\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className='app-container'>\r\n      <QuizPanel />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}